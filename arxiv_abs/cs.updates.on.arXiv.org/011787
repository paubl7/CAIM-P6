On-line firms deploy suites of software platforms, where each platform is designed to interact
with users during a certain activity, such as browsing, chatting, socializing, emailing, driving,
etc. The economic and incentive structure of this exchange, as well as its algorithmic nature, have
not been explored to our knowledge; we initiate their study in this paper. We model this interaction
as a Stackelberg game between a Designer and one or more Agents. We model an Agent as a Markov chain
whose states are activities; we assume that the Agent's utility is a linear function of the steady-state
distribution of this chain. The Designer may design a platform for each of these activities/states;
if a platform is adopted by the Agent, the transition probabilities of the Markov chain are affected,
and so is the objective of the Agent. The Designer's utility is a linear function of the steady state
probabilities of the accessible states (that is, the ones for which the platform has been adopted),
minus the development cost of the platforms. The underlying optimization problem of the Agent --
that is, how to choose the states for which to adopt the platform -- is an MDP. If this MDP has a simple
yet plausible structure (the transition probabilities from one state to another only depend on
the target state and the recurrent probability of the current state) the Agent's problem can be solved
by a greedy algorithm. The Designer's optimization problem (designing a custom suite for the Agent
so as to optimize, through the Agent's optimum reaction, the Designer's revenue), while NP-hard,
has an FPTAS. These results generalize, under mild additional assumptions, from a single Agent
to a distribution of Agents with finite support. The Designer's optimization problem has abysmal
"price of robustness", suggesting that learning the parameters of the problem is crucial for the
Designer. 