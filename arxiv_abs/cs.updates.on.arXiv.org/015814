A conceptual model can be used to manage complexity in both the design and implementation phases
of the system development life cycle. Such a model requires a firm grasp of the abstract principles
on which a system is based, as well as an understanding of the high-level nature of the representation
of entities and processes. In this context, models can have distinct architectural characteristics.
This paper discusses model multiplicity (e.g., unified modeling language [UML]), model singularity
(e.g., object-process methodology [OPM], thinging machine [TM]), and a heterogeneous model that
involves multiplicity and singularity. The basic idea of model multiplicity is that it is not possible
to present all views in a single representation, so a number of models are used, with each model representing
a different view. The model singularity approach uses only a single unified model that assimilates
its subsystems into one system. This paper is concerned with current approaches, especially in
software engineering texts, where multimodal UML is introduced as the general-purpose modeling
language (i.e., UML is modeling). In such a situation, we suggest raising the issue of multiplicity
versus singularity in modeling. This would foster a basic appreciation of the UML advantages and
difficulties that may be faced during modeling, especially in the educational setting. Furthermore,
we advocate the claim that a multiplicity of views does not necessitate a multiplicity of models.
The model singularity approach can represent multiple views (static, behavior) without resorting
to a collection of multiple models with various notations. We present an example of such a model where
the static representation is developed first. Then, the dynamic view and behavioral representations
are built by incorporating a decomposition strategy interleaved with the notion of time. 