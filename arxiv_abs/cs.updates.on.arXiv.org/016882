Software repositories such as GitHub host a large number of software entities. Developers collaboratively
discuss, implement, use, and share these entities. Proper documentation plays an important role
in successful software management and maintenance. Users exploit Issue Tracking Systems, a facility
of software repositories, to keep track of issue reports, to manage the workload and processes,
and finally, to document the highlight of their team's effort. An issue report is a rich source of
collaboratively curated software knowledge, and can contain a reported problem, a request for
new features, or merely a question about the software product. As the number of these issues increases,
it becomes harder to manage them manually. GitHub provides labels for tagging issues, as a means
of issue management. However, about half of the issues in GitHub's top 1000 repositories do not have
any labels. In this work, we aim at automating the process of managing issue reports for software
teams. We propose a two-stage approach to predict both the objective behind opening an issue and
its priority level using feature engineering methods and state-of-the-art text classifiers.
We train and evaluate our models in both project-based and cross-project settings. The latter approach
provides a generic prediction model applicable for any unseen software project or projects with
little historical data. Our proposed approach can successfully predict the objective and priority
level of issue reports with 82% and 75% accuracy, respectively. Moreover, we conducted a user study
on unlabeled issues from six unseen GitHub projects to assess the performance of the cross-project
model on new data. The model achieves 90% accuracy on the sample set. 