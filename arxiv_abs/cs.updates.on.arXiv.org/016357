Object orientation has become the predominant paradigm for conceptual modeling (e.g., UML), where
the notions of class and object form the primitive building blocks of thought. Classes act as templates
for objects that have attributes and methods (actions). The modeled systems are not even necessarily
software systems: They can be human and artificial systems of many different kinds (e.g., teaching
and learning systems). The UML class diagram is described as a central component of model-driven
software development. It is the most common diagram in object-oriented models and used to model
the static design view of a system. Objects both carry data and execute actions. According to some
authorities in modeling, a certain degree of difficulty exists in understanding the semantics
of these notions in UML class diagrams. Some researchers claim class diagrams have limited use for
conceptual analysis and that they are best used for logical design. Performing conceptual analysis
should not concern the ways facts are grouped into structures. Whether a fact will end up in the design
as an attribute is not a conceptual issue. UML leads to drilling down into physical design details
(e.g., private/public attributes, encapsulated operations, and navigating direction of an association).
This paper is a venture to further the understanding of object-orientated concepts as exemplified
in UML with the aim of developing a broad comprehension of conceptual modeling fundamentals. Thinging
machine (TM) modeling is a new modeling language employed in such an undertaking. TM modeling interlaces
structure (components) and actionality where actions infiltrate the attributes as much as the
classes. Although space limitations affect some aspects of the class diagram, the concluding assessment
of this study reveals the class description is a kind of shorthand for a richer sematic TM construct.
