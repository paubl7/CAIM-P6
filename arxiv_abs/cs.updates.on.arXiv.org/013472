Context: Code smells (CS) tend to compromise software quality and also demand more effort by developers
to maintain and evolve the application throughout its life-cycle. They have long been catalogued
with corresponding mitigating solutions called refactoring operations. Objective: This SLR
has a twofold goal: the first is to identify the main code smells detection techniques and tools discussed
in the literature, and the second is to analyze to which extent visual techniques have been applied
to support the former. Method: Over 83 primary studies indexed in major scientific repositories
were identified by our search string in this SLR. Then, following existing best practices for secondary
studies, we applied inclusion/exclusion criteria to select the most relevant works, extract their
features and classify them. Results: We found that the most commonly used approaches to code smells
detection are search-based (30.1%), and metric-based (24.1%). Most of the studies (83.1%) use
open-source software, with the Java language occupying the first position (77.1%). In terms of
code smells, God Class (51.8%), Feature Envy (33.7%), and Long Method (26.5%) are the most covered
ones. Machine learning techniques are used in 35% of the studies. Around 80% of the studies only detect
code smells, without providing visualization techniques. In visualization-based approaches
several methods are used, such as: city metaphors, 3D visualization techniques. Conclusions:
We confirm that the detection of CS is a non trivial task, and there is still a lot of work to be done in
terms of: reducing the subjectivity associated with the definition and detection of CS; increasing
the diversity of detected CS and of supported programming languages; constructing and sharing
oracles and datasets to facilitate the replication of CS detection and visualization techniques
validation experiments. 