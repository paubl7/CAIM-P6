To complete tasks faster, developers often have to sacrifice the quality of the software. Such compromised
practice results in the increasing burden to developers in future development. The metaphor, technical
debt, describes such practice. Prior research has illustrated the negative impact of technical
debt, and many researchers investigated how developers deal with a certain type of technical debt.
However, few studies focused on the removal of different types of technical debt in practice. To
fill this gap, we use the introduction and removal of different types of self-admitted technical
debt (i.e., SATD) in 7 deep learning frameworks as an example. This is because deep learning frameworks
are some of the most important software systems today due to their prevalent use in life-impacting
deep learning applications. Moreover, the field of the development of different deep learning
frameworks is the same, which enables us to find common behaviors on the removal of different types
of technical debt across projects. By mining the file history of these frameworks, we find that design
debt is introduced the most along the development process. As for the removal of technical debt,
we find that requirement debt is removed the most, and design debt is removed the fastest. Most of
test debt, design debt, and requirement debt are removed by the developers who introduced them.
Based on the introduction and removal of different types of technical debt, we discuss the evolution
of the frequencies of different types of technical debt to depict the unresolved sub-optimal trade-offs
or decisions that are confronted by developers along the development process. We also discuss the
removal patterns of different types of technical debt, highlight future research directions,
and provide recommendations for practitioners. 