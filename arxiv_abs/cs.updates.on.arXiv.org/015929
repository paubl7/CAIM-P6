This paper investigates the approximability of the Longest Common Subsequence (LCS) problem.
The fastest algorithm for solving the LCS problem exactly runs in essentially quadratic time in
the length of the input, and it is known that under the Strong Exponential Time Hypothesis the quadratic
running time cannot be beaten. There are no such limitations for the approximate computation of
the LCS however, except in some limited scenarios. There is also a scarcity of approximation algorithms.
When the two given strings are over an alphabet of size $k$, returning the subsequence formed by the
most frequent symbol occurring in both strings achieves a $1/k$ approximation for the LCS. It is
an open problem whether a better than $1/k$ approximation can be achieved in truly subquadratic
time ($O(n^{2-\delta})$ time for constant $\delta>0$). A recent result [Rubinstein and Song SODA'2020]
showed that a $1/2+\epsilon$ approximation for the LCS over a binary alphabet is possible in truly
subquadratic time, provided the input strings have the same length. In this paper we show that if
a $1/2+\epsilon$ approximation (for $\epsilon>0$) is achievable for binary LCS in truly subquadratic
time when the input strings can be unequal, then for every constant $k$, there is a truly subquadratic
time algorithm that achieves a $1/k+\delta$ approximation for $k$-ary alphabet LCS for some $\delta>0$.
Thus the binary case is the hardest. We also show that for every constant $k$, if one is given two strings
of \emph{equal} length over a $k$-ary alphabet, one can obtain a $1/k+\epsilon$ approximation
for some constant $\epsilon>0$ in truly subquadratic time, thus extending the Rubinstein and Song
result to all alphabets of constant size. 