Context: As the adoption of continuous delivery practices increases in software organizations,
different scenarios struggle to make it scales for their products in long-term evolution. This
study looks at the concrete software architecture as a relevant factor for successfully achieving
continuous delivery goals. Objective: This study aims to understand how the design of software
architectures impacts the continuous deployment of their software product. Method: We conducted
a systematic literature review to identify proper evidence regarding the research objective.
We analyzed the selected sources adopting a synthesis and analysis approach based on Grounded Theory.
Results: We selected 14 primary sources. Through our analysis process, we developed a theory that
explains the phenomenon of Architecting for Continuous Deployment. The theory describes three
other phenomena that support Architecting for Continuous Deployment: Supporting Operations,
Continuous Evolution, and Improving Deployability. Furthermore, the theory comprises the following
elements: contexts, actions and interactions, quality attributes, principles, and effects.
We instantiated these elements and identified their interrelationships. The theory is supported
by providing bi-directional traceability from the selected sources to the elements and vice-versa.
Conclusions: Developing adequate architecture plays a crucial role in enabling continuous delivery.
Supporting operations becomes vital to increase the deployability and monitorability of software
architecture. These two outcomes require that developers accept responsibility for maintaining
the operations. The continuous evolution of the architecture is essential, but it must consider
balanced management of technical debt. Finally, improving deployability requires attention
to the test strategy and how it affects downtime to enable efficient pipelines. 